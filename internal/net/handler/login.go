package handler

import (
	"log"

	"nso-server/internal/infra"
	"nso-server/internal/model"
	"nso-server/internal/net"
	"nso-server/internal/proto"
)

func HandleLogin(msg *proto.Message, s *net.Session) {
	r := msg.Reader()

	username, _ := r.ReadUTF()
	password, _ := r.ReadUTF()
	version, _ := r.ReadUTF()
	deviceID, _ := r.ReadUTF()
	otherInfo, _ := r.ReadUTF()
	randomToken, _ := r.ReadUTF()
	serverLogin, _ := r.ReadByte()

	log.Println("üîê Login Request:")
	log.Printf("- Username: %s", username)
	log.Printf("- Password: %s", password)
	log.Printf("- Version: %s", version)
	log.Printf("- DeviceID: %s", deviceID)
	log.Printf("- Other: %s", otherInfo)
	log.Printf("- RandomToken: %s", randomToken)
	log.Printf("- ServerLogin: %d", serverLogin)

	// T√¨m account
	var acc model.Account
	err := infra.DB.Where("username = ?", username).First(&acc).Error
	if err != nil {
		// ‚ùó T√†i kho·∫£n ch∆∞a t·ªìn t·∫°i ‚Üí t·∫°o m·ªõi
		acc = model.Account{
			Username:     username,
			Password:     password,
			RandomToken:  randomToken,
		}
		if err := infra.DB.Create(&acc).Error; err != nil {
			log.Printf("‚ùå Cannot create account: %v", err)
			return
		}
		log.Printf("‚úÖ Created new account ID=%d", acc.ID)
	} else {
		log.Printf("‚úÖ Found existing account ID=%d", acc.ID)

		// C·∫≠p nh·∫≠t token n·∫øu ch∆∞a c√≥
		if acc.RandomToken == "" && randomToken != "" {
			acc.RandomToken = randomToken
			infra.DB.Save(&acc)
		}
	}

	// G·∫Øn AccountID v√†o session n·∫øu c√≥ session record
	if s.ClientSessionID != nil {
		infra.DB.Model(&model.ClientSession{}).
			Where("id = ?", *s.ClientSessionID).
			Update("account_id", acc.ID)
		log.Printf("üîó Linked session %d ‚Üí account %d", *s.ClientSessionID, acc.ID)
	}

}
